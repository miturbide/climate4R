library(drat)
getwd()
?insertPackage
options(dratRepo = getwd())
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
# repodir = getwd(),                   # Location of git repo: not need if dratRepo set
action="prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = getwd(),                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = "/media/maialen/work/WORK/GIT/climate4R/",                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = "/media/maialen/work/WORK/GIT/climate4R/src",                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = "/media/maialen/work/WORK/GIT/climate4R",                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::addRepo("datarepo","http://miturbide.github.io/climate4R")
setRepositories()
setRepositories()
drat::addRepo("climate4R","http://miturbide.github.io/climate4R")
setRepositories()
install.packages("downscaleR")
repo = git2r::repository("/media/maialen/work/WORK/GIT/climate4R/")
cred = git2r::cred_user_pass("miturbide", "lukinvela9&9")
git2r::push(repo, "origin", "refs/heads/master", credentials = cred)
dratRepo
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = "/media/maialen/work/WORK/GIT/climate4R/",                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
install.packages("downscaleR", repos = climate4R)
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = getwd(),                   # Location of git repo: not need if dratRepo set
action="prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
getwd()
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = "/media/maialen/work/WORK/GIT/climate4R/",                   # Location of git repo: not need if dratRepo set
action="prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::insertPackage("/media/maialen/work/WORK/GIT/loadeR_1.0.9.tar.gz",  # Path to src
repodir = getwd(),                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
repo = git2r::repository(getwd())
cred = git2r::cred_user_pass("miturbide", "lukinvela9&9")
git2r::push(repo, "origin", "refs/heads/master", credentials = cred)
git2r::push(repo, "origin", "gh-pages", credentials = cred)
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
repo = git2r::repository(getwd())
cred = git2r::cred_user_pass("miturbide", "lukinvela9&9")
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
repo
git2r::push(repo, "origin", "head/gh-pages", credentials = cred)
cred
?pushBack
?push
git2r::push(repo, credentials = cred)
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
drat::addRepo("climate4R","http://miturbide.github.io/climate4R")
setRepositories()
install.packages("downscaleR", repos = climate4R)
install.packages("downscaleR")
setRepositories()
setRepositories()
install.packages("downscaleR", "http://miturbide.github.io/climate4R")
drat::addRepo("climate4R","http://miturbide.github.io/climate4R")
install.packages("downscaleR", "http://miturbide.github.io/climate4R")
setRepositories()
install.packages("downscaleR")
install.packages("downscaleR", "climate4R")
install.packages("transformeR")
?install.packages
setRepositories()
install.packages("downscaleR", repos = "http://miturbide.github.io/climate4R")
setRepositories()
install.packages("loadeR", repos = "http://miturbide.github.io/climate4R")
pkg <- "/media/maialen/work/WORK/GIT/transformeR_0.0.14.tar.gz"
drat::insertPackage(pkg,  # Path to src
repodir = getwd(),                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
repo = git2r::repository(getwd())
cred = git2r::cred_user_pass("miturbide", "lukinvela9&9")
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
repo
git2r::push(repo, "origin", "refs/heads/gh-pages", credentials = cred)
repo
?write_PACKAGES
getwd()
dir <- "/media/maialen/work/WORK/GIT/transformeR/"
tools::write_PACKAGES(dir, type="win.binary")
tools::write_PACKAGES(dir, type="win.binary", verbose = T)
pkg <- "/media/maialen/work/WORK/GIT/loadeR_0.0-1.tar.gz"
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
wd <- getwd()
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
pkg
?insertPackage
?pruneRepo
pruneRepo()
drat::pruneRepo()
drat::pruneRepo(getwd())
pkg
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = loadeR)
drat::pruneRepo(getwd(), pkg = "loadeR")
load("/media/maialen/work/WORK/GIT/climate4R/src/contrib/PACKAGES.rds")
new_x1 <- readRDS("src/contrib/PACKAGES.rds")
new_x1
str(new_x1)
new_x1 <- new_x1[-2,]
new_x1
save(new_x1, file = "src/contrib/PACKAGES.rds")
pkg <- "/media/maialen/work/WORK/GIT/loadeR_0.0-1.tar.gz"
wd <- getwd()
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
install.packages("loadeR", repos = "http://miturbide.github.io/climate4R")
repo = git2r::repository(getwd())
repo
readRDS("src/contrib/PACKAGES.rds")
install.packages("loadeR", repos = "http://miturbide.github.io/climate4R")
drat::addRepo("climate4R","http://miturbide.github.io/climate4R")
install.packages("loadeR", repos = "http://miturbide.github.io/climate4R")
pkg <- "/media/maialen/work/WORK/GIT/transformeR_0.0.14.tar.gz"
wd <- getwd()
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
pkg <- "/media/maialen/work/WORK/GIT/loadeR_0.0-1.tar.gz"
wd <- getwd()
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
pkg <- "/media/maialen/work/WORK/GIT/downscaleR_2.0.3.tar.gz"
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
pkg <- "/media/maialen/work/WORK/GIT/transformeR_0.0.14.tar.gz"
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
pkg <- "/media/maialen/work/WORK/GIT/loadeR_1.1.0.tar.gz"
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
drat::pruneRepo(getwd(), pkg = c("loadeR", "downscaleR", "transformeR"))
install.packages("loadeR", repos = "http://miturbide.github.io/climate4R")
library(tools)
?write_PACKAGES
dir <- "/media/maialen/work/WORK/GIT/transformeR"
tools::write_PACKAGES(dir, type = "win.binary", verbose = T)
?insertPackage
?write_PACKAGES
rVersion <- paste(unlist(getRversion())[1:2], collapse = ".")
rVersion
binPaths <- list(
win.binary = file.path("bin/windows/contrib", rVersion),
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPaths <- lapply(binPaths, function(x) file.path(localCRAN, x))
binPaths <- list(
win.binary = file.path("bin/windows/contrib", rVersion),
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPaths <- lapply(binPaths, function(x) file.path(localCRAN, x))
binPaths
binPaths <- lapply(binPaths, function(x) file.path(x))
dir <- getwd()
binPaths <- lapply(binPaths, function(x) file.path(dir,x))
binPaths
lapply(binPaths, function(path) {
dir.create(path, recursive = TRUE)
})
contribDir <- "src/contrib/"
tools::write_PACKAGES(contribDir, type = "source")
lapply(binPaths, function(path) {
tools::write_PACKAGES(path)
})
contribDir
binPaths
lapply(binPaths, function(path) {
tools::write_PACKAGES(path)
})
tools::write_PACKAGES(binPaths$win.binary)
tools::write_PACKAGES(binPaths$win.binary, verbose = T)
binPaths
binPath
binPaths
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, verbose = T)
})
?addPackage
??addPackage
binPaths
tools::write_PACKAGES(binPaths$win.binary, type = "win.bianry", verbose = T)
tools::write_PACKAGES(binPaths$win.binary, type = "win.binary", verbose = T)
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, subdirs = T, verbose = T)
})
dirgz <- "/media/maialen/work/WORK/GIT/"
file.path(contribDir)
file.copy(
list.files(file.path(contribDir), pattern = "tar.gz")
file.path(contribDir, "sashimi_1.0.tar.gz")
)
file.copy(
list.files(file.path(contribDir), pattern = "tar.gz"))
list.files(file.path(contribDir), pattern = "tar.gz")
list.files(file.path(contribDir), pattern = "tar.gz", full.names = T)
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, subdirs = T, verbose = T)
})
?insertPackage
pkg <- "/media/maialen/work/WORK/GIT/downscaleR_2.0.3.tar.gz"
drat::insertPackage(pkg,  # Path to src
repodir = wd,                   # Location of git repo: not need if dratRepo set
action = "prune",                                  # Remove old package version
commit = T)                                      # Commit to repo
wd
?file.copy
contribDir
dirgz <- "/media/maialen/work/WORK/GIT/"
files <- list.files(dirgz, pattern = "tar.gz")
files
files <- list.files(contribDir, pattern = "tar.gz")
files
files2 <- list.files(contribDir, pattern = "tar.gz", full.names = T)
files2
binPaths[[i]]
i <- 1
binPaths[[i]]
length(files)
binPkg <- function(contribDir, binPaths){
files <- list.files(contribDir, pattern = "tar.gz")
files2 <- list.files(contribDir, pattern = "tar.gz", full.names = T)
for(l in 1:length(files)){
lapply(binPaths, function(path){
file.copy(files2[[l]], path)
})
}
}
binPkg(contribDir, binPaths)
binPkg <- function(contribDir, binPaths){
files <- list.files(contribDir, pattern = "tar.gz")
files2 <- list.files(contribDir, pattern = "tar.gz", full.names = T)
for(l in 1:length(files)){
lapply(binPaths, function(path){
file.copy(files2[[l]], path)
})
}
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, subdirs = T, verbose = T, latestOnly = T)
})
}
binPkg(contribDir, binPaths)
?pruneRepo
binWin <- list(
win.binary = file.path("bin/windows/contrib", rVersion)
)
binMac <- list(
mac.binary = file.path("bin/macosx/contrib", rVersion),
mac.binary.mavericks = file.path("bin/macosx/mavericks/contrib", rVersion),
mac.binary.leopard = file.path("bin/macosx/leopard/contrib", rVersion)
)
binPkg <- function(contribDir, binPaths, type = c("win.binary", "mac.binary")){
files <- list.files(contribDir, pattern = "tar.gz")
files2 <- list.files(contribDir, pattern = "tar.gz", full.names = T)
for(l in 1:length(files)){
lapply(binPaths, function(path){
file.copy(files2[[l]], path)
})
}
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, subdirs = T, verbose = T, latestOnly = T)
})
}
binPkg(contribDir, binWin)
binPkg <- function(contribDir, binPaths, type = c("win.binary", "mac.binary")){
files <- list.files(contribDir, pattern = "tar.gz")
files2 <- list.files(contribDir, pattern = "tar.gz", full.names = T)
for(l in 1:length(files)){
lapply(binPaths, function(path){
file.copy(files2[[l]], path)
})
}
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, subdirs = T, verbose = T, latestOnly = T, type = type)
})
}
binPkg(contribDir, binWin)
tools::write_PACKAGES(path, subdirs = T, verbose = T, latestOnly = T, type = "win.binary")
binPkg <- function(contribDir, binPaths, type = c("win.binary", "mac.binary")){
files <- list.files(contribDir, pattern = "tar.gz")
files2 <- list.files(contribDir, pattern = "tar.gz", full.names = T)
for(l in 1:length(files)){
lapply(binPaths, function(path){
file.copy(files2[[l]], path)
})
}
lapply(binPaths, function(path) {
tools::write_PACKAGES(path, subdirs = T, verbose = T, latestOnly = T, type = type)
})
}
binPkg(contribDir, binWin, "win.binary")
library(devtools)
files2
files2[1]
build_win(files2[1])
build_win("/media/maialen/work/WORK/GIT/transformeR/")
?write_PACKAGES
download.file("https://github.com/SantanderMetGroup/downscaleR/archive/v2.0.3.zip")
download.file("https://github.com/SantanderMetGroup/downscaleR/archive/v2.0.3.zip",
destfile = "bin/windows/contrib/3.4/")
download.file("https://github.com/SantanderMetGroup/downscaleR/archive/v2.0.3.zip",
destfile = "bin/windows/contrib/3.4/v2.0.3.zip")
write_PACKAGES("bin/windows/contrib/3.4/", subdirs = T, verbose = T, latestOnly = T)
write_PACKAGES("bin/windows/contrib/3.4/", subdirs = T, verbose = T, latestOnly = T, type = "win.binary")
write_PACKAGES("bin/windows/contrib/3.4/v2.0.3.zip", subdirs = T, verbose = T, latestOnly = T, type = "win.binary")
write_PACKAGES("bin/windows/contrib/3.4/", type = "win.binary")
